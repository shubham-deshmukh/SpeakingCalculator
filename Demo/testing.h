

long double * * create2DArray(int numOfRow, int numOfCol);
void display1DArray(long double * arr, int numOfCol);
void display1DIntArray(int * arr, int numOfCol);
void display2DArray(long double * *p, int numOfRow, int numOfCol);
void scientific_display2DArray(long double * *p, int numOfRow, int numOfCol);
int cpFromFileToArray(char * fname, long double * arr);
void cpFromArrayToFile(char * fname, long double * arr, int arr_len);
void cpFromArrayToFileV2(char * fname, long double * arr, int arr_len) ;
void appendArrayToFile(char * fname, long double * arr, int low, int high);
void appendArrayToFileV2(char * fname, long double * arr, int low, int high);
long double getDCShift(long double * arr, int len);
void shiftData(long double *arr, int len, long double shift);
long double getAbsMax(long double * arr, int len);
void normaliseData(long double * arr, int len);
int getHighestAmplitudeIndex(long double * arr, int len);
void getFrontAndEndMarkerOfNFrames(int n, int hightestAmplitudeIndex, int * front, int * end);
long double getEnergyPerFrame(int frame_size, long double * arr, int low, int high);
int storeEnergy(int frame_size, long double * arr, int len_arr, long double * e);
int getFrontMarker(long double * energy, int arr_len) ;
int getEndMarker(long double * energy, int arr_len);
long double * getHamVal() ;
long double * applyHamWinOnData(long double * ham,long double * data, int p);
long double * getRi(long double * arr, int p);
long double * getAi(long double * r , int p);
long double * getCi(long double * a, int p);
long double * getRaisedSinVal();
long double * applyRaisedSinWinOnCi(long double * sine, long double *c_i);
long double * getCiForAFrame(long double * arr, int p);
long double * *getCiOfTFrames(long double * arr, int t, int start, int p);
long double ** convertCSVTo2DArray(char * fcsv, int numOfRow, int numOfCol, int * numOfActualRow);
long double ** getCodebook(char * f_txt, int numOfRow, int numOfCol, int * numOfActualRow);
long double ** *getInitialModelFromFile(char * fileNameOfPIMatrix, char * fileNameOfAMatrix, char * fileNameOfBMatrix, int n, int m);
long double calculateForwardVariable(long double * *alpha, long double ** *model, int *obsSeq, int n, int t);
long double calculateBackwardVariable(long double * *beta, long double ** *model, int *obsSeq, int n, int t);
int * calculateGamma(long double * *alpha, long double * *beta, long double * *gamma, long double probOfObsSeqGivenModel, int n, int t);
int * calculateDelta(long double ** *model, int * obsSeq, long double * *delta, long double * *psi, int n, int t, long double * pstar);
long double ** *calculateXi(long double ** *model, int *obsSeq,long double * *alpha, long double * *beta, long double probOfObsSeqGivenModel, int n, int t);
long double ** * reEstimateModel(long double ** *model, int * obsSeq, long double * *gamma, long double ** *xi, int n, int m, int t);
void modifyBMatrix(long double ** *model, int n, int m, long double threshold);
void displayModel(long double ** *model, int n, int m);
long double getTokhuraDistanceV2(long double * ci_ref,long double * ci_test, long double * tokhuraWeights);
int * generateObsSeq(long double * *codeBook,int numOfRowsInCodeBook,long double * *tCiVector, int t, int p);
long double ** *getModelUsingHMM(long double ** *model, int * obsSeq, int n, int m, int t);
long double ** *getAvgModel(long double *** *modelsForADigit,int numOfUtterances, int n, int m);
int getModelWithHighProb(long double *** *modelsForAllDigit, int numOfDigits,int * obsSeq, int n,int t);
void cpModelToFile(long double ** *model, char * path, int n, int m);
long double ** *cpFromFileToModel(char * path, int n, int m);
long double getAvgEnergy(long double * energy, int arr_len);
int getFrontMarker_avg_energy_based(long double * energy, int arr_len, long double avgEnergy);
int getEndMarker_avg_energy_based(long double * energy, int arr_len, long double avgEnergy);
void training(char * rollNum);
void prerecordedTesting();
void prerecordedSingleUtterance();
void prerecordedThreeSignal(int * op1, int * op, int * op2);
int liveTesting();
void joys();